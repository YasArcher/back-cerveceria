INSERT INTO cervezas_tipoingrediente (nombre_tipo) VALUES 
('Maltas'),
('Lúpulos'),
('Levaduras');
INSERT INTO cervezas_unidadmedida (nombre) VALUES ('kg');
-- Insertar Ingredientes: Maltas
INSERT INTO "cervezas_ingrediente" (nombre_ingrediente, tipo_id, unidad_id, stock) VALUES
('Pilsen', 1, 1, 0),
('Munich', 1, 1, 0),
('Abbey', 1, 1, 0),
('Cara Ruby', 1, 1, 0),
('Cara Blond', 1, 1, 0),
('Cara Clair', 1, 1, 0),
('Wheat Blanc', 1, 1, 0),
('Cebada Tostada', 1, 1, 0),
('Peated', 1, 1, 0),
('Pale Ale', 1, 1, 0),
('Cara Gold', 1, 1, 0),
('Chocolate', 1, 1, 0),
('Melano', 1, 1, 0),
('Black', 1, 1, 0),
('Special Belgium', 1, 1, 0),
('Crystal', 1, 1, 0);

-- Lúpulos
INSERT INTO "cervezas_ingrediente" (nombre_ingrediente, tipo_id, unidad_id, stock) VALUES
('Saaz', 2, 1, 0),
('Hallertau Mittelfruh', 2, 1, 0),
('Perle', 2, 1, 0),
('Polaris', 2, 1, 0),
('Cascada', 2, 1, 0),
('Mosaico', 2, 1, 0),
('Golding', 2, 1, 0),
('Fuggle', 2, 1, 0),
('Magnum', 2, 1, 0),
('Tettnang', 2, 1, 0),
('Nugget', 2, 1, 0);

-- Levaduras
INSERT INTO "cervezas_ingrediente" (nombre_ingrediente, tipo_id, unidad_id, stock) VALUES
('Safale S-33', 3, 1, 0),
('Safale BE-256', 3, 1, 0),
('Safale S-04', 3, 1, 0),
('Safale T58', 3, 1, 0);
INSERT INTO cervezas_receta (id, nombre_receta, descripcion, porcentaje_alcohol, contenido_neto, imagen) VALUES
(1, 'Abadía Ámbar', 'Notas de caramelo y dulces, fusión de malta Munich y Abbey. Leve amargo y característico dulzor.', 7.0, 350, NULL),
(2, 'Triple Blond', 'Rubia de alta graduación, aroma a malta, sutil sabor dulce, final amargo seco y placentero.', 9.0, 350, NULL),
(3, 'Cerveza Scotch', 'Estilo irlandés con semillas de roble, aromas a caramelo y granos tostados.', 6.5, 350, NULL),
(4, 'Belga Ahumada', 'Color marrón, aroma a pan y caramelo, sabor amaderado, excepcional.', 6.0, 350, NULL),
(5, 'Doppel Bock', 'Alta maltosidad, sabores acaramelados y tostados, cuerpo pleno, clásico alemán.', 10.2, 350, NULL),
(6, 'Stout Belga', 'Notas tostadas, retrogusto de chocolate y café, frutas oscuras y levaduras belgas.', 6.5, 350, NULL),
(7, 'Porter', 'Sabor a vainilla, malta tostada, chocolate, caramelo y tofe, con carácter floral.', 7.0, 350, NULL);




📘 DOCUMENTACIÓN DE ENDPOINTS – API de Cervecería

────────────────────────────────────────────────────────────
📌 GET /recetas/
Descripción: Lista todas las recetas.
Ejemplo de respuesta:
[
  {
    "id": 1,
    "nombre_receta": "IPA Clásica",
    "descripcion": "Receta de India Pale Ale",
    "fecha_creacion": "2025-07-02",
    ...
  }
]

────────────────────────────────────────────────────────────
📌 POST /recetas/
Descripción: Crea una receta.
Body:
{
  "nombre_receta": "Porter Fuerte",
  "descripcion": "Receta robusta con maltas oscuras"
}
Respuesta:
{
  "id": 2,
  "nombre_receta": "Porter Fuerte",
  "descripcion": "Receta robusta con maltas oscuras"
}

────────────────────────────────────────────────────────────
📌 GET /ingredientes-avanzado/
Descripción: Lista ingredientes con campo extra 'receta' (si se pasa al crear).
Respuesta esperada:
[
  {
    "id": 1,
    "nombre_ingrediente": "Maltas Pilsen",
    "tipo": 1,
    "unidad": 1,
    "stock": 50
  }
]

────────────────────────────────────────────────────────────
📌 POST /ingredientes-avanzado/
Descripción: Crea un ingrediente y lo asigna a una receta.
Body:
{
  "nombre_ingrediente": "Cara Ruby",
  "tipo": 1,
  "unidad": 1,
  "stock": 25,
  "receta": 2
}

────────────────────────────────────────────────────────────
📌 POST /detalle-ingredientes/
Descripción: Asigna un ingrediente a una receta (sin duplicados).
Body:
{
  "receta": 2,
  "ingrediente": 4
}

────────────────────────────────────────────────────────────
📌 GET /ingredientes/
Descripción: Lista básica de todos los ingredientes.

────────────────────────────────────────────────────────────
📌 GET /tipos-con-ingredientes/
Descripción: Lista todos los tipos de ingrediente con sus ingredientes.
Respuesta:
[
  {
    "id": 1,
    "nombre_tipo": "Maltas",
    "ingredientes": [
      {
        "id": 1,
        "nombre_ingrediente": "Pilsen",
        "unidad": {
          "id": 1,
          "nombre": "kg"
        },
        "stock": 50
      }
    ]
  }
]

────────────────────────────────────────────────────────────
📌 GET /recetas-con-ingredientes/
Descripción: Trae recetas con sus ingredientes organizados por tipo.
Respuesta:
[
  {
    "id": 1,
    "nombre_receta": "IPA Clásica",
    "descripcion": "...",
    "fecha_creacion": "...",
    "tipos_ingredientes": [
      {
        "id": 1,
        "nombre_tipo": "Maltas",
        "ingredientes": [
          {
            "id": 3,
            "nombre_ingrediente": "Pale Ale",
            "unidad": { "id": 1, "nombre": "kg" },
            "stock": 45,
            "cantidad": 2.5
          }
        ]
      }
    ]
  }
]

────────────────────────────────────────────────────────────
📌 POST /preparar-bebida/
Descripción: Prepara una bebida y descuenta del stock los ingredientes según la receta y la cantidad producida.
Body:
{
  "receta_id": 1,
  "cantidad": 10
}
Respuesta exitosa:
{
  "message": "Bebida preparada correctamente.",
  "ingredientes_actualizados": [
    { "ingrediente_id": 3, "nuevo_stock": 42.5 },
    { "ingrediente_id": 5, "nuevo_stock": 39.0 }
  ]
}
Errores posibles:
{
  "error": "Stock insuficiente para el ingrediente: Cara Blond"
}

📦 INSTRUCCIONES PARA LEVANTAR EL PROYECTO CERVECERÍA

. CLONAR EL PROYECTO
---------------------
git clone https://github.com/tu_usuario/back-cerveceria.git
cd back-cerveceria

. CREAR ENTORNO VIRTUAL E INSTALAR DEPENDENCIAS
-------------------------------------------------
python -m venv venv
source venv/bin/activate     # En Linux/macOS
venv\Scripts\activate        # En Windows

pip install --upgrade pip
pip install -r requirements.txt

. CONFIGURAR VARIABLES DE ENTORNO
----------------------------------
Crea un archivo `.env` en la raíz con el siguiente contenido:

DEBUG=0
SECRET_KEY=tesisproject


. Levantar los contenedores con Docker:
   docker-compose up -d --build

4. Aplicar las migraciones para crear las tablas en la base de datos:
   docker-compose exec web python manage.py makemigrations
   docker-compose exec web python manage.py migrate

. Crear un superusuario para acceder al panel de administración:
   docker-compose exec web python manage.py createsuperuser

. Insertar los datos iniciales en la base de datos (tipos de ingredientes y unidad de medida):
   Puedes ejecutar este bloque directamente en la base de datos PostgreSQL usando alguna herramienta como pgAdmin o psql:
   
   INSERT INTO cervezas_tipoingrediente (nombre_tipo) VALUES 
   ('Maltas'),
   ('Lúpulos'),
   ('Levaduras');

   INSERT INTO cervezas_unidadmedida (nombre) VALUES ('kg');

. Consumir la API desde el navegador o herramientas como Postman:
   - GET /recetas/
   - POST /ingredientes-avanzado/
   - GET /tipos-con-ingredientes/
   - POST /preparar-bebida/  (con campos "receta": <id> y "cantidad": <valor>)
